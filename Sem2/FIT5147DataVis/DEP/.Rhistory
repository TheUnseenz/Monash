texttemplate = "<b>%{label}</b><br>%{value:.2f}%<br>%{percentParent} of group",
hovertemplate = paste0(
"<b>%{label}</b><br>",
"Plastic Waste Share: %{value:.2f}%<br>",
"World GDP Share: %{customdata:.2f}%<br>",
"%{percentParent} of group<br>",
"<extra></extra>"
),
customdata = plot_data$world_gdp_share,
maxdepth = 2
) %>% layout(title = "Plastic Waste Share by Country, Grouped by Income Level")
p # Return the plotly object from tryCatch
}, error = function(e) {
message(paste("ERROR caught during plot_ly generation:", e$message))
NULL # Return NULL if an error occurs
})
# --- DEBUGGING CHECKS - LEVEL 2: Plotly Object Inspection ---
message("\n--- Debugging Report - Level 2: Plotly Object Inspection ---")
message(paste("Is 'fig' NULL after plot_ly call:", is.null(fig)))
if (!is.null(fig)) {
message(paste("Class of 'fig':", class(fig)))
message(paste("Number of traces in 'fig':", length(fig$x$data))) # Check if data traces exist
# Check if a specific trace type is present
if(length(fig$x$data) > 0 && "type" %in% names(fig$x$data[[1]])) {
message(paste("Type of first trace:", fig$x$data[[1]]$type))
} else {
message("No traces found or first trace has no type.")
}
message(paste("Plotly layout title:", fig$x$layout$title$text)) # Check if layout title is present
}
}
# Display the plot
if (!is.null(fig)) {
message("Displaying plot...")
fig
} else {
message("Figure object is NULL, cannot display plot.")
}
# --- Advanced Debugging: Print Plotly JSON (Corrected and Protected) ---
message("\n--- Plotly JSON Representation ---")
if (!is.null(fig) && inherits(fig, "plotly")) {
tryCatch({
json_data_string <- plotly_json(fig, json = TRUE)
message("JSON data for plot (first 1000 chars):")
message(substr(json_data_string, 1, 1000))
writeLines(json_data_string, "plotly_treemap.json")
message("Plotly JSON successfully written to plotly_treemap.json")
}, error = function(e) {
message(paste("Error generating/writing JSON (after plot_ly call):", e$message))
})
} else {
message("Figure object is not a valid plotly object or is NULL. Cannot generate JSON.")
}
message("--- Debugging complete ---")
library(plotly)
library(dplyr)
library(tibble)
# --- DIRECTLY ASSIGNED DATA AND INPUTS for Standalone Debugging ---
# Simulate base_plot_data with extremely clean, simple data
# This is to rule out any subtle data issues from random generation
base_plot_data_simulated <- tibble(
country = c("CountryA", "CountryB", "CountryC", "CountryD", "CountryE",
"CountryF", "CountryG", "CountryH", "CountryI", "CountryJ"),
income_group = c("High income", "High income", "Mid income", "Mid income", "Mid income",
"Low income", "Low income", "Low income", "Low income", "Low income"),
mismanaged_plastic_waste_share = c(5.2, 3.1, 7.8, 2.5, 4.9, 1.1, 0.8, 1.5, 2.0, 0.5), # All positive
world_gdp_share = runif(10, 0.1, 3) # Dummy GDP
)
# Simulate input values directly
input_treemap_income_toggle <- c("High income", "Mid income", "Low income") # Match dummy data
input_treemap_grouping <- "income"
# Simulate income_colors_ordinal
income_colors_ordinal <- list(
"High income" = "#440154",
"Mid income" = "#3B528B", # Added "Mid income"
"Low income" = "#5DC863"
)
# --- Debugging the 'income' grouping plot logic ---
# Use the directly simulated base_plot_data
plot_data <- base_plot_data_simulated %>%
as_tibble() %>%
filter(income_group %in% input_treemap_income_toggle) %>%
filter(!is.na(mismanaged_plastic_waste_share),
mismanaged_plastic_waste_share > 0,
!is.na(income_group),
!is.na(country),
!is.na(world_gdp_share))
# --- DEBUGGING CHECKS - LEVEL 1: Data Pre-Plotly ---
message("--- Debugging Report - Level 1: Data Preparation ---")
message(paste("Rows in plot_data after initial filtering:", nrow(plot_data)))
if (nrow(plot_data) == 0) {
message("NO DATA TO DISPLAY after initial filtering. Returning empty plot_ly object.")
fig <- plot_ly() %>%
layout(title = "No data to display for selected income groups/filters.",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
} else {
message("Data is present after initial filtering. Proceeding to plot generation.")
# Print structure and head of plot_data for final verification
message("\nStructure of plot_data:")
str(plot_data)
message("\nHead of plot_data:")
print(head(plot_data, 10)) # Print all 10 rows for simple data
# Check unique values and data types in critical columns
message(paste("Unique income_groups in plot_data:", toString(unique(plot_data$income_group))))
message(paste("Number of unique countries in plot_data:", length(unique(plot_data$country))))
message(paste("Are 'country' values character/factor:", is.character(plot_data$country) || is.factor(plot_data$country)))
message(paste("Are 'income_group' values character/factor:", is.character(plot_data$income_group) || is.factor(plot_data$income_group)))
message(paste("Are 'mismanaged_plastic_waste_share' values numeric:", is.numeric(plot_data$mismanaged_plastic_waste_share)))
message(paste("Range of 'mismanaged_plastic_waste_share': [", min(plot_data$mismanaged_plastic_waste_share), ", ", max(plot_data$mismanaged_plastic_waste_share), "]"))
# Ensure colors can be mapped
missing_colors <- setdiff(unique(plot_data$income_group), names(income_colors_ordinal))
if (length(missing_colors) > 0) {
warning(paste("Missing color definitions for income groups:", toString(missing_colors)))
for (group in missing_colors) {
income_colors_ordinal[[group]] <- "grey"
}
}
# --- This is the 'income' grouping branch you want to debug ---
message("Attempting to build plotly object...")
fig <- tryCatch({
p <- plot_ly(
data = plot_data,
type = "treemap",
source = "treemap_plotly_source",
labels = ~country,
parents = ~income_group,
values = ~mismanaged_plastic_waste_share,
branchvalues = "total",
marker = list(
colors = sapply(plot_data$income_group, function(ig) income_colors_ordinal[[as.character(ig)]]),
line = list(width = 1, color = 'white')
),
textinfo = "label+value+percent parent",
texttemplate = "<b>%{label}</b><br>%{value:.2f}%<br>%{percentParent} of group",
hovertemplate = paste0(
"<b>%{label}</b><br>",
"Plastic Waste Share: %{value:.2f}%<br>",
"World GDP Share: %{customdata:.2f}%<br>",
"%{percentParent} of group<br>",
"<extra></extra>"
),
customdata = plot_data$world_gdp_share,
maxdepth = 2
) %>% layout(title = "Plastic Waste Share by Country, Grouped by Income Level")
p # Return the plotly object from tryCatch
}, error = function(e) {
message(paste("ERROR caught during plot_ly generation:", e$message))
NULL # Return NULL if an error occurs
})
# --- DEBUGGING CHECKS - LEVEL 2: Plotly Object Inspection ---
message("\n--- Debugging Report - Level 2: Plotly Object Inspection ---")
message(paste("Is 'fig' NULL after plot_ly call:", is.null(fig)))
if (!is.null(fig)) {
message(paste("Class of 'fig':", class(fig)))
message(paste("Number of traces in 'fig':", length(fig$x$data))) # Check if data traces exist
# Check if a specific trace type is present
if(length(fig$x$data) > 0 && "type" %in% names(fig$x$data[[1]])) {
message(paste("Type of first trace:", fig$x$data[[1]]$type))
} else {
message("No traces found or first trace has no type.")
}
message(paste("Plotly layout title:", fig$x$layout$title$text)) # Check if layout title is present
}
}
# Display the plot
if (!is.null(fig)) {
message("Displaying plot...")
fig
} else {
message("Figure object is NULL, cannot display plot.")
}
# --- Advanced Debugging: Print Plotly JSON (Corrected and Protected) ---
message("\n--- Plotly JSON Representation ---")
if (!is.null(fig) && inherits(fig, "plotly")) {
tryCatch({
json_data_string <- plotly_json(fig, json = TRUE)
message("JSON data for plot (first 1000 chars):")
message(substr(json_data_string, 1, 1000))
writeLines(json_data_string, "plotly_treemap.json")
message("Plotly JSON successfully written to plotly_treemap.json")
}, error = function(e) {
message(paste("Error generating/writing JSON (after plot_ly call):", e$message))
})
} else {
message("Figure object is not a valid plotly object or is NULL. Cannot generate JSON.")
}
message("--- Debugging complete ---")
library(plotly)
library(dplyr)
library(tibble)
# --- DIRECTLY ASSIGNED DATA AND INPUTS for Standalone Debugging ---
# Simulate base_plot_data with extremely clean, simple data
base_plot_data_simulated <- tibble(
country = c("CountryA", "CountryB", "CountryC", "CountryD", "CountryE",
"CountryF", "CountryG", "CountryH", "CountryI", "CountryJ"),
income_group = c("High income", "High income", "Mid income", "Mid income", "Mid income",
"Low income", "Low income", "Low income", "Low income", "Low income"),
mismanaged_plastic_waste_share = c(5.2, 3.1, 7.8, 2.5, 4.9, 1.1, 0.8, 1.5, 2.0, 0.5), # All positive
world_gdp_share = runif(10, 0.1, 3) # Dummy GDP
)
# Simulate input values directly
input_treemap_income_toggle <- c("High income", "Mid income", "Low income") # Match dummy data
input_treemap_grouping <- "income"
# Simulate income_colors_ordinal
income_colors_ordinal <- list(
"High income" = "#440154",
"Mid income" = "#3B528B",
"Low income" = "#5DC863"
)
# --- Debugging the 'income' grouping plot logic ---
# Use the directly simulated base_plot_data
plot_data <- base_plot_data_simulated %>%
as_tibble() %>%
filter(income_group %in% input_treemap_income_toggle) %>%
filter(!is.na(mismanaged_plastic_waste_share),
mismanaged_plastic_waste_share > 0,
!is.na(income_group),
!is.na(country),
!is.na(world_gdp_share))
# --- DEBUGGING CHECKS - LEVEL 1: Data Pre-Plotly ---
message("--- Debugging Report - Level 1: Data Preparation ---")
message(paste("Rows in plot_data after initial filtering:", nrow(plot_data)))
if (nrow(plot_data) == 0) {
message("NO DATA TO DISPLAY after initial filtering. Returning empty plot_ly object.")
fig <- plot_ly() %>%
layout(title = "No data to display for selected income groups/filters.",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
} else {
message("Data is present after initial filtering. Proceeding to plot generation.")
message("\nStructure of plot_data:")
str(plot_data)
message("\nHead of plot_data:")
print(head(plot_data, 10))
message(paste("Unique income_groups in plot_data:", toString(unique(plot_data$income_group))))
message(paste("Number of unique countries in plot_data:", length(unique(plot_data$country))))
message(paste("Are 'country' values character/factor:", is.character(plot_data$country) || is.factor(plot_data$country)))
message(paste("Are 'income_group' values character/factor:", is.character(plot_data$income_group) || is.factor(plot_data$income_group)))
message(paste("Are 'mismanaged_plastic_waste_share' values numeric:", is.numeric(plot_data$mismanaged_plastic_waste_share)))
message(paste("Range of 'mismanaged_plastic_waste_share': [", min(plot_data$mismanaged_plastic_waste_share), ", ", max(plot_data$mismanaged_plastic_waste_share), "]"))
missing_colors <- setdiff(unique(plot_data$income_group), names(income_colors_ordinal))
if (length(missing_colors) > 0) {
warning(paste("Missing color definitions for income groups:", toString(missing_colors)))
for (group in missing_colors) {
income_colors_ordinal[[group]] <- "grey"
}
}
# --- CRITICAL CHANGE: Explicitly define vectors for treemap parameters ---
# Create a combined set of labels and parents for the full hierarchy
# This requires careful construction.
# First, all income groups (which will be parents)
all_nodes_labels <- unique(plot_data$income_group)
all_nodes_ids <- unique(plot_data$income_group)
all_nodes_parents <- rep("", length(all_nodes_labels)) # Root nodes have empty parent
# Then, add countries as children
all_nodes_labels <- c(all_nodes_labels, plot_data$country)
all_nodes_ids <- c(all_nodes_ids, plot_data$country) # IDs should be unique
all_nodes_parents <- c(all_nodes_parents, plot_data$income_group)
# Values for income groups will be sums of children (handled by branchvalues="total" implicitly)
# Values for countries are mismanaged_plastic_waste_share
all_nodes_values <- c(rep(0, length(unique(plot_data$income_group))), plot_data$mismanaged_plastic_waste_share)
# Customdata for all nodes (will be NA for income groups, actual GDP for countries)
all_nodes_customdata <- c(rep(NA_real_, length(unique(plot_data$income_group))), plot_data$world_gdp_share)
# Colors array for all nodes. Parents get income_group color, children get their parent's income_group color.
# This requires careful mapping.
# Create a mapping from ID to color for all nodes
node_colors <- character(length(all_nodes_ids))
names(node_colors) <- all_nodes_ids
# Assign colors to income group nodes
for (group in unique(plot_data$income_group)) {
node_colors[group] <- income_colors_ordinal[[as.character(group)]]
}
# Assign colors to country nodes based on their income group
for (i in 1:nrow(plot_data)) {
node_colors[plot_data$country[i]] <- income_colors_ordinal[[as.character(plot_data$income_group[i])]]
}
all_node_colors <- node_colors[all_nodes_ids]
message("Attempting to build plotly object with explicit vectors...")
fig <- tryCatch({
p <- plot_ly(
type = "treemap",
source = "treemap_plotly_source",
ids = all_nodes_ids,       # Explicit unique IDs for all nodes
labels = all_nodes_labels, # Labels to display for each node
parents = all_nodes_parents, # Parent ID for each node
values = all_nodes_values, # Values for each node
branchvalues = "total", # Important: parents' values are summed from children
marker = list(
colors = all_node_colors, # Use the explicitly created color vector
line = list(width = 1, color = 'white')
),
textinfo = "label+value+percent parent",
texttemplate = "<b>%{label}</b><br>%{value:.2f}%<br>%{percentParent} of group",
hovertemplate = paste0(
"<b>%{label}</b><br>",
"Plastic Waste Share: %{value:.2f}%<br>",
"World GDP Share: %{customdata:.2f}%<br>",
"%{percentParent} of group<br>",
"<extra></extra>"
),
customdata = all_nodes_customdata, # Pass customdata for all nodes
maxdepth = 2
) %>% layout(title = "Plastic Waste Share by Country, Grouped by Income Level")
p
}, error = function(e) {
message(paste("ERROR caught during plot_ly generation (explicit vectors):", e$message))
NULL
})
# --- DEBUGGING CHECKS - LEVEL 2: Plotly Object Inspection ---
message("\n--- Debugging Report - Level 2: Plotly Object Inspection ---")
message(paste("Is 'fig' NULL after plot_ly call:", is.null(fig)))
if (!is.null(fig)) {
message(paste("Class of 'fig':", class(fig)))
message(paste("Number of traces in 'fig':", length(fig$x$data)))
if(length(fig$x$data) > 0 && "type" %in% names(fig$x$data[[1]])) {
message(paste("Type of first trace:", fig$x$data[[1]]$type))
} else {
message("No traces found or first trace has no type.")
}
# Check if layout title is present - sometimes it's set even if traces fail
message(paste("Plotly layout title:", fig$x$layout$title$text))
}
}
# Display the plot
if (!is.null(fig)) {
message("Displaying plot...")
fig
} else {
message("Figure object is NULL, cannot display plot.")
}
# --- Advanced Debugging: Print Plotly JSON (Corrected and Protected) ---
message("\n--- Plotly JSON Representation ---")
if (!is.null(fig) && inherits(fig, "plotly")) {
tryCatch({
json_data_string <- plotly_json(fig, json = TRUE)
message("JSON data for plot (first 1000 chars):")
message(substr(json_data_string, 1, 1000))
writeLines(json_data_string, "plotly_treemap.json")
message("Plotly JSON successfully written to plotly_treemap.json")
}, error = function(e) {
message(paste("Error generating/writing JSON (after plot_ly call):", e$message))
})
} else {
message("Figure object is not a valid plotly object or is NULL. Cannot generate JSON.")
}
message("--- Debugging complete ---")
library(treemap) # Install if you haven't: install.packages("treemap")
library(dplyr)
library(tibble)
# --- DIRECTLY ASSIGNED DATA AND INPUTS for Standalone Debugging ---
# Simulate base_plot_data with extremely clean, simple data
base_plot_data_simulated <- tibble(
country = c("CountryA", "CountryB", "CountryC", "CountryD", "CountryE",
"CountryF", "CountryG", "CountryH", "CountryI", "CountryJ",
"CountryK", "CountryL", "CountryM", "CountryN", "CountryO"), # More countries for better visual
income_group = c("High income", "High income", "Mid income", "Mid income", "Mid income",
"Low income", "Low income", "Low income", "Low income", "Low income",
"High income", "Mid income", "Mid income", "Low income", "Low income"),
mismanaged_plastic_waste_share = c(5.2, 3.1, 7.8, 2.5, 4.9, 1.1, 0.8, 1.5, 2.0, 0.5,
6.5, 3.5, 5.0, 1.8, 0.9), # All positive
world_gdp_share = runif(15, 0.1, 3) # Dummy GDP
)
# Simulate input values directly (for filtering)
input_treemap_income_toggle <- c("High income", "Mid income", "Low income")
# --- Data Preparation for treemap ---
plot_data <- base_plot_data_simulated %>%
as_tibble() %>%
filter(income_group %in% input_treemap_income_toggle) %>%
filter(!is.na(mismanaged_plastic_waste_share),
mismanaged_plastic_waste_share > 0,
!is.na(income_group),
!is.na(country),
!is.na(world_gdp_share))
message("--- Data Preparation for treemap ---")
message(paste("Rows in plot_data after filtering:", nrow(plot_data)))
if (nrow(plot_data) == 0) {
message("No data to display after filtering for treemap.")
} else {
message("Data is ready for treemap.")
print(head(plot_data))
}
# --- Create the Treemap ---
if (nrow(plot_data) > 0) {
# Sort data to influence arrangement (larger values first within groups)
# treemap usually sorts internally, but explicit sorting can sometimes help
plot_data_sorted <- plot_data %>%
arrange(income_group, desc(mismanaged_plastic_waste_share))
# Define the treemap
# index: The columns used for the hierarchy (from parent to child)
# vSize: The variable that determines the size of each rectangle
# vColor: The variable that determines the color of each rectangle
# type: "categorical" for distinct colors per category in vColor
# title: Main title of the plot
# fontsize.labels: Font size for labels (level 1 is income_group, level 2 is country)
# lowerbound.cex.labels: Minimum relative size for labels to be displayed
# inflate.labels: Expand labels to fill rectangles
# border.lwds: Line widths for borders
# border.col: Colors for borders
# palette: Color palette for the categorical variable (vColor)
# fontcolor.labels: Color of the labels
# bg.labels: Background color of labels
# force.print.labels: Force labels to be printed even if small space
# Using a standard R plot window
graphics.off() # Close any existing plot windows
dev.new() # Open a new plot window
treemap(
plot_data_sorted,
index = c("income_group", "country"), # Hierarchy: income_group -> country
vSize = "mismanaged_plastic_waste_share", # Size by plastic waste share
vColor = "income_group", # Color by income group
type = "categorical", # Use categorical coloring for income_group
title = "Plastic Waste Share by Country, Grouped by Income Level",
align.labels = list(c("left", "top"), c("left", "top")), # Align labels top-left
fontsize.labels = c(12, 8), # Larger font for income groups, smaller for countries
fontcolor.labels = c("white", "black"), # White for main groups, black for countries
bg.labels = c("transparent", "transparent"), # Transparent backgrounds
border.lwds = c(2, 1), # Thicker border for income groups, thinner for countries
border.col = c("grey", "white"), # Different border colors
palette = c("#440154", "#3B528B", "#21908C", "#5DC863"), # Custom colors if needed
# (ensure this matches your income_colors_ordinal if you have specific ones)
# The order in palette matters if not explicitly mapped, check unique(plot_data_sorted$income_group)
inflate.labels = TRUE,
overlap.labels = 0.5, # Allow some overlap for smaller labels
force.print.labels = TRUE # Try to force all labels
)
message("Treemap (from 'treemap' package) displayed.")
} else {
message("No data to create treemap. Plot not generated.")
}
View(plot_data)
View(plot_data)
shiny::runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
library(shiny)
library(plotly)
library(dplyr)
# Sample data
sample_data <- tibble(
country = c("USA", "China", "India", "Germany", "Brazil"),
income_group = c("High income", "Upper middle income", "Lower middle income", "High income", "Upper middle income"),
world_gdp_share = c(24.0, 17.0, 7.0, 4.5, 2.5),
mismanaged_plastic_waste_share = c(0.3, 2.1, 5.0, 0.1, 1.8)
)
ui <- fluidPage(
titlePanel("Plotly Treemap Example"),
selectInput("treemap_grouping", "Group by:", choices = c("None" = "none", "Income Group" = "income")),
plotlyOutput("treemap_plot"),
h4("Selected Country:"),
verbatimTextOutput("selected_country")
)
server <- function(input, output, session) {
rv <- reactiveValues(selected_country = NULL)
output$treemap_plot <- renderPlotly({
plot_data <- sample_data %>%
arrange(desc(mismanaged_plastic_waste_share)) %>%
mutate(
label = paste0(
country, "<br>GDP Share: ", round(world_gdp_share, 2),
"%<br>Plastic Waste: ", round(mismanaged_plastic_waste_share, 2), "%"
),
id = country,
parent = if (input$treemap_grouping == "income") income_group else ""
)
if (input$treemap_grouping == "income") {
parents_data <- plot_data %>%
distinct(income_group) %>%
mutate(
label = income_group,
parent = "",
id = income_group,
world_gdp_share = 0
)
plot_data <- bind_rows(parents_data, plot_data)
}
plot_ly(
data = plot_data,
type = "treemap",
ids = ~id,
labels = ~label,
parents = ~parent,
values = ~world_gdp_share,
hovertext = ~label,
hoverinfo = "text",
customdata = ~country,
source = "treemap_plot",
textinfo = "label+value+percent parent",
marker = list(colors = ~income_group)
)
})
observeEvent(event_data("plotly_click", source = "treemap_plot"), {
click_data <- event_data("plotly_click", source = "treemap_plot")
if (!is.null(click_data$customdata)) {
rv$selected_country <- click_data$customdata
}
})
output$selected_country <- renderText({
rv$selected_country
})
}
shinyApp(ui, server)
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
runApp('C:/PersonalStuff/Monash/Sem2/FIT5147DataVis/DEP')
